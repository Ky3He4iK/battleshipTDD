package controller

import androidx.compose.runtime.MutableState
import androidx.compose.runtime.mutableStateOf
import entity.Map
import kotlin.random.Random

class Game {
    var isVertical: Boolean = true
    var playersMap = Map(isAutoGenerated = false)
    var botsMap = Map(isAutoGenerated = true)
    var state: MutableState<GameState>
    private var mapState = PrepareState()
    var textState = ""
    enum class GameState(val textState: String) {
        Prepare("Расстановка кораблей."),
        PlayersTurn("Ваш ход"),
        BotsTurn("Ход бота"),
        PlayersWin("Вы победили!!!"),
        BotsWin("Вы проиграли :(")
    }

    init {
        state = mutableStateOf(GameState.Prepare)
    }

    fun restart() {
        playersMap = Map(isAutoGenerated = false)
        botsMap = Map(isAutoGenerated = true)
        state.value = GameState.Prepare
        textState = ""
        mapState.currentBoatIndex = 0
    }
    fun click(x: Int, y: Int, isHorizontal: Boolean = true, isBotField: Boolean) {
        when (state.value) {
            GameState.PlayersTurn -> {
                if (isBotField) {
                    val isHit = hit(x, y)
                    if (isHit == Map.HitState.Miss) {
                        state.value = GameState.BotsTurn
                        textState = state.value.textState
                        do {
                            val isBotHit = botHit()
                        } while (isBotHit == Map.HitState.Hit)
                    }
                    state.value = GameState.PlayersTurn
                    textState = state.value.textState
                    checkGameState()
                }
            }
            GameState.Prepare -> {
                if (!isBotField) {
                    val result =
                        playersMap.setBoat(x, y, mapState.getSize(), isHorizontal)
                    if (result) mapState.next()
                    if (mapState.isFinished())
                        state.value = GameState.PlayersTurn
                    else
                        state.value = GameState.Prepare

                    textState = state.value.textState
                }
            }
        }
    }
    fun botHit() : Map.HitState {
        while(true) {
            val x = Random.nextInt(0, 9)
            val y = Random.nextInt(0, 9)
            return playersMap.hit(x, y)
        }
    }
    fun checkGameState() {
        if (playersMap.isFleetDead())
            state.value = GameState.BotsWin
        if (botsMap.isFleetDead())
            state.value = GameState.PlayersWin
        textState = state.value.textState
    }

    private fun hit(x: Int, y: Int) : Map.HitState {
        return when (state.value) {
            GameState.PlayersTurn -> {
                botsMap.hit(x, y)
            }
            else -> return Map.HitState.Error // Unreachable
        }
    }

    internal class PrepareState {
        val boatSizes = listOf(1, 1, 1, 1, 2, 2, 2, 3, 3, 4)
        var currentBoatIndex = 0
        fun next() {
            currentBoatIndex++
        }
        fun getSize(): Int = boatSizes[currentBoatIndex]
        fun isFinished(): Boolean {
            return boatSizes.size <= currentBoatIndex
        }
    }

}
